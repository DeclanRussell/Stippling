#ifndef PARTICLE_H
#define PARTICLE_H

//----------------------------------------------------------------------------------------------------------------------
/// @file Particle.h
/// @brief Simple particle class. Doesnt do any Drawing simply stores position and movement data
/// @author Declan Russell
/// @version 1.0
/// @date 17/11/2015
/// @class Particle
//----------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <glm/vec3.hpp>

class Particle
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our default lazy constructor just inits everything to zero
    //----------------------------------------------------------------------------------------------------------------------
    Particle();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our second contructor. Initialises all members to zero if none set.
    /// @param _pos - position of our particle
    /// @param _vel - velocity of our particle
    /// @param _acc - acceleration of our particle
    //----------------------------------------------------------------------------------------------------------------------
    Particle(glm::vec3 _pos, glm::vec3 _vel = glm::vec3(0,0,0),glm::vec3 _acc = glm::vec3(0,0,0));
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Particle(){}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator of the density of our particle
    /// @param _d - density of our particle
    //----------------------------------------------------------------------------------------------------------------------
    inline void setDensity(float _d){m_density = _d;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to the density of our particle
    /// @return density of our particle (float)
    //----------------------------------------------------------------------------------------------------------------------
    inline float getDensity(){return m_density;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the mass of our particle
    /// @param _m - desired mass of particle
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMass(float _m){m_mass = _m;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to the mass of our particle
    /// @return mass of our particle (float)
    //----------------------------------------------------------------------------------------------------------------------
    inline float getMass(){return m_mass;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the position of our particle
    /// @param _pos - desired position of our particle
    //----------------------------------------------------------------------------------------------------------------------
    inline void setPos(glm::vec3 _pos){m_pos = _pos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the old position of our particle
    /// @param _pos - desired old position of our particle
    //----------------------------------------------------------------------------------------------------------------------
    inline void setOldPos(glm::vec3 _pos){m_oldPos = _pos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the velocity of our particle
    /// @param _vel - desired velocity of our particle
    //----------------------------------------------------------------------------------------------------------------------
    inline void setVel(glm::vec3 _vel){m_vel = _vel;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the acceleration of our particle
    /// @param _acc - desired acceleration of our particle
    //----------------------------------------------------------------------------------------------------------------------
    inline void setAcc(glm::vec3 _acc){m_acc = _acc;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our particle position
    /// @return glm::vec3 of particle position
    //----------------------------------------------------------------------------------------------------------------------
    inline glm::vec3 getPos(){return m_pos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our old particle position
    /// @return glm::vec3 of old particle position
    //----------------------------------------------------------------------------------------------------------------------
    inline glm::vec3 getOldPos(){return m_oldPos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our particle velocity
    /// @return glm::vec3 of particle velocity
    //----------------------------------------------------------------------------------------------------------------------
    inline glm::vec3 getVel(){return m_vel;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our particle acceleration
    /// @return glm::vec3 of particle acceleration
    //----------------------------------------------------------------------------------------------------------------------
    inline glm::vec3 getAcc(){return m_acc;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the id of the particle
    /// @return id of particle
    //----------------------------------------------------------------------------------------------------------------------
    inline int getId(){return m_id;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief overide of print operator
    /// @return string of Position, acceleration and velocity
    //----------------------------------------------------------------------------------------------------------------------
    friend std::ostream& operator<< (std::ostream& out, Particle& p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief overide equality operator so we can compare particles
    /// @return if the particles are the equavilent (bool)
    //----------------------------------------------------------------------------------------------------------------------
    inline bool operator== (Particle& rhs){ return this->getId() == rhs.getId(); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief overide inequality operator so we can compare particles
    /// @return if the particles are the inequavilent (bool)
    //----------------------------------------------------------------------------------------------------------------------
    inline bool operator!= (Particle& rhs){return this->getId() != rhs.getId();}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief position of our paticle
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_pos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @breif old position of our particles
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_oldPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief velocity of our particle
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_vel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief acceleration of our particle
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_acc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief density of our particle
    //----------------------------------------------------------------------------------------------------------------------
    float m_density;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mass of our particle
    //----------------------------------------------------------------------------------------------------------------------
    float m_mass;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id of the particle. For this I am using a pointer to itself.
    //----------------------------------------------------------------------------------------------------------------------
    int m_id;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief static variable to create unique id's for particles
    //----------------------------------------------------------------------------------------------------------------------
    static int m_idMaker;
    //----------------------------------------------------------------------------------------------------------------------

};

#endif // PARTICLE_H
